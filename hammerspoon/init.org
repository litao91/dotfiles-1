#+AUTHOR: Roman Coedo
#+TITLE: Hammerspoon Settings

* Configuration watcher
#+BEGIN_SRC lua :tangle yes :padline no
hs.pathwatcher.new(os.getenv("HOME") .. "/.hammerspoon/", hs.reload):start()
hs.alert("Config loaded")
#+END_SRC

* Window management
** Smart grid
#+BEGIN_SRC lua :tangle yes
  function gridOp(op, cell)
      if (op.x ~= null) then
          cell.x = cell.x + op.x
      end
      if (op.y ~= null) then
          cell.y = cell.y + op.y
      end
      if (op.w ~= null) then
          cell.w = cell.w + op.w
      end
      if (op.h ~= null) then
          cell.h = cell.h + op.h
      end
      return cell
  end

  function expandToRight(cell)  return gridOp({w = 1},         cell) end
  function expandToLeft(cell)   return gridOp({x = -1, w = 1}, cell) end
  function expandToBottom(cell) return gridOp({h = 1},         cell) end
  function expandToTop(cell)    return gridOp({y = -1, h = 1}, cell) end

  function shrinkToRight(cell)  return gridOp({x = 1, w = -1}, cell) end
  function shrinkToLeft(cell)   return gridOp({w = -1},        cell) end
  function shrinkToBottom(cell) return gridOp({y = 1, h = -1}, cell) end
  function shrinkToTop(cell)    return gridOp({h = -1}       , cell) end

  function smartResizeRight(cell)
      if ((cell.x + cell.w >= hs.grid.GRIDWIDTH) and (cell.w > 1)) then
          return shrinkToRight(cell)
      elseif ((cell.x + cell.w < hs.grid.GRIDWIDTH) and (cell.w < hs.grid.GRIDWIDTH)) then
          return expandToRight(cell)
      end
  end

  function smartResizeLeft(cell)
      if (cell.x + cell.w >= hs.grid.GRIDWIDTH) then
          if (cell.x > 0) then
              return expandToLeft(cell)
          else
              return shrinkToLeft(cell)
          end
      else
          if (cell.w > 1) then
              return shrinkToLeft(cell)
          elseif (cell.x > 0) then
              return expandToLeft(cell)
          end
      end
  end

  function smartResizeDown(cell)
      if ((cell.y + cell.h >= hs.grid.GRIDHEIGHT) and (cell.h > 1)) then
          return shrinkToBottom(cell)
      elseif ((cell.y + cell.h < hs.grid.GRIDHEIGHT) and (cell.h < hs.grid.GRIDHEIGHT)) then
          return expandToBottom(cell)
      end
  end

  function smartResizeUp(cell)
      if (cell.y + cell.h >= hs.grid.GRIDHEIGHT) then
          if (cell.y > 0) then
              return expandToTop(cell)
          else
              return shrinkToTop(cell)
          end
      else
          if (cell.h > 1) then
              return shrinkToTop(cell)
          elseif (cell.y > 0) then
              return expandToTop(cell)
          end
      end
  end

  function smartResizeWindowRight() hs.grid.adjustFocusedWindow(smartResizeRight) end
  function smartResizeWindowLeft() hs.grid.adjustFocusedWindow(smartResizeLeft) end
  function smartResizeWindowUp() hs.grid.adjustFocusedWindow(smartResizeUp) end
  function smartResizeWindowDown() hs.grid.adjustFocusedWindow(smartResizeDown) end

  function adjustGrid(h, w) hs.grid.adjustHeight(h) hs.grid.adjustWidth(w) end
  function increaseGrid() adjustGrid(1, 1) end
  function decreaseGrid() adjustGrid(-1, -1) end

  function launchOrSwitch(name, realName)
      if (hs.window.frontmostWindow() ~= null and hs.window.frontmostWindow():application() == hs.appfinder.appFromName(name)) then
          hs.eventtap.keyStroke(cmd, "`")
      else
          hs.application.launchOrFocus(realName or name)
      end
  end

  function pushToNextScreen()
     win = hs.window.frontmostWindow()
     win:moveToScreen(win:screen():next())
  end
#+END_SRC

** Variables
#+BEGIN_SRC lua :tangle yes :padline no
  hs.window.animationDuration = 0
  hs.grid.MARGINX = 0
  hs.grid.MARGINY = 0
  hs.grid.GRIDWIDTH = 2
  hs.grid.GRIDHEIGHT = 2
#+END_SRC

* Bindings
#+BEGIN_SRC lua :tangle yes
  local cmd = {"cmd"}
  local alt = {"alt"}
  local cmdalt = {"cmd", "alt"}

  hs.hotkey.bind(cmd, "s", function() hs.hints.windowHints() end)

  hs.hotkey.bind(cmd, "h", function() launchOrSwitch("Google Chrome") end)
  hs.hotkey.bind(cmd, "j", function() launchOrSwitch("iTerm2", "iTerm") end)
  hs.hotkey.bind(cmd, "k", function() hs.application.launchOrFocus("Emacs") end)
  hs.hotkey.bind(cmd, "l", function() launchOrSwitch("IntelliJ IDEA 15") end)

  hs.hotkey.bind(cmd, "delete", function() hs.window.frontmostWindow():close() end)
  hs.hotkey.bind(cmdalt, "delete", function() hs.window.frontmostWindow():application():kill() end)

  -- Launcher bindings
  l = hs.hotkey.modal.new({}, nil, "Launcher mode")

  l:bind({}, "escape", function() l:exit() end)

  l:bind({}, "i", function() l:exit() hs.application.launchOrFocus("IntelliJ IDEA 15") end)
  l:bind({}, "e", function() l:exit() hs.application.launchOrFocus("Emacs") end)
  l:bind({}, "t", function() l:exit() hs.application.launchOrFocus("iTerm2") end)
  l:bind({}, "s", function() l:exit() hs.application.launchOrFocus("Spotify") end)
  l:bind({}, "l", function() l:exit() hs.application.launchOrFocus("Slack") end)
  l:bind({}, "c", function() l:exit() hs.application.launchOrFocus("Google Chrome") end)

  -- Spotify bindings
  s = hs.hotkey.modal.new({}, nil, "Spotify mode")

  s:bind({}, "escape", function() s:exit() end)

  s:bind({}, "p", function() s:exit() hs.spotify.playpause()  end)
  s:bind({}, "h", function() s:exit() hs.spotify.previous() end)
  s:bind({}, "l", function() s:exit() hs.spotify.next() end)
  s:bind({}, "i", function() s:exit() hs.spotify.displayCurrentTrack() end)

  -- Window bindings
  w = hs.hotkey.modal.new(cmd, "return")

  w:bind(alt, "space", function() end)
  w:bind({}, "escape", function() w:exit() end)

  w:bind(cmd, "return", function() w:exit() l:enter() end)
  w:bind({}, "s", function() w:exit() s:enter() end)

  w:bind({}, "h", hs.grid.pushWindowLeft)
  w:bind({}, "j", hs.grid.pushWindowDown)
  w:bind({}, "k", hs.grid.pushWindowUp)
  w:bind({}, "l", hs.grid.pushWindowRight)

  w:bind({}, "u", smartResizeWindowDown)
  w:bind({}, "i", smartResizeWindowUp)
  w:bind({}, "o", smartResizeWindowRight)
  w:bind({}, "y", smartResizeWindowLeft)

  w:bind({}, "[", decreaseGrid)
  w:bind({}, "]", increaseGrid)

  w:bind({}, "n", function() w:exit() pushToNextScreen() end)
  w:bind({}, "m", function() w:exit() hs.grid.maximizeWindow() end)
  w:bind({}, "f", function() w:exit() hs.window.frontmostWindow():toggleFullScreen() end)
#+END_SRC
  
* Hammerspoon CLI
#+BEGIN_SRC lua :tangle yes
hs.ipc.cliInstall()
#+END_SRC

