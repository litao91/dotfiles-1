#+AUTHOR: Roman Coedo
#+TITLE: Emacs Settings

* I like lexical binding
#+BEGIN_SRC emacs-lisp :tangle yes :padline no
;;; -*- lexical-binding: t -*-
#+END_SRC

* Package management
** Cask
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'cask "/usr/local/share/emacs/site-lisp/cask/cask.el")
(cask-initialize)
#+END_SRC

** Pallet
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'pallet)
(pallet-mode t)
#+END_SRC

** Dependency management
#+BEGIN_SRC emacs-lisp :tangle yes
(setq ad-redefinition-action 'accept)
(require 'req-package)
#+END_SRC
   
* Platform
#+BEGIN_SRC emacs-lisp :tangle yes
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-env "GOPATH"))

(setq mac-command-modifier 'meta
      mac-option-key-is-meta nil
      mac-option-modifier 'none
      system-uses-terminfo nil
      osx-clipboard-mode t)

(provide 'darwin-platform)
#+END_SRC

* Interface
** Global interface settings
#+BEGIN_SRC emacs-lisp :tangle yes
  (if (display-graphic-p)
      (progn
        (scroll-bar-mode -1)
        (tool-bar-mode -1)))

  (setq inhibit-splash-screen t
        menu-bar-mode -1)
#+END_SRC

** Linum mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package linum
    :init
    (global-linum-mode t)
    :config
    (setq linum-format 'dynamic)

    (set-face-attribute 'linum nil :height 100)
    (defadvice linum-update-window (around linum-dynamic activate)
      "Number into string with enough spaces."
      (let* ((w (length (number-to-string
                         (count-lines (point-min) (point-max)))))
             (linum-format (concat " %" (number-to-string w) "d ")))
        ad-do-it)))
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package smart-mode-line
    :config
    (progn
      (setq sml/theme nil)
      (sml/setup)))
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package gruvbox-theme
    :require smart-mode-line
    :config
    (load-theme 'gruvbox t)
    ; Try to merge this into gruvbox theme
    (let ((gruvbox-dark0_hard  (if (display-graphic-p) "#1d2021" "color-234"))
          (gruvbox-dark0       (if (display-graphic-p) "#282828" "color-235"))
          (gruvbox-dark0_soft  (if (display-graphic-p) "#32302f" "color-236"))
          (gruvbox-dark1       (if (display-graphic-p) "#3c3836" "color-237"))
          (gruvbox-dark2       (if (display-graphic-p) "#504945" "color-239"))
          (gruvbox-dark3       (if (display-graphic-p) "#665c54" "color-241"))
          (gruvbox-dark4       (if (display-graphic-p) "#7c6f64" "color-243"))

          (gruvbox-medium      (if (display-graphic-p) "#928374" "color-245"))

          (gruvbox-light0_hard (if (display-graphic-p) "#ffffc8" "color-230"))
          (gruvbox-light0      (if (display-graphic-p) "#fdf4c1" "color-229"))
          (gruvbox-light0_soft (if (display-graphic-p) "#f4e8ba" "color-228"))
          (gruvbox-light1      (if (display-graphic-p) "#ebdbb2" "color-223"))
          (gruvbox-light2      (if (display-graphic-p) "#d5c4a1" "color-250"))
          (gruvbox-light3      (if (display-graphic-p) "#bdae93" "color-248"))
          (gruvbox-light4      (if (display-graphic-p) "#a89984" "color-246"))

          (gruvbox-bright_red     (if (display-graphic-p) "#fb4933" "color-167"))
          (gruvbox-bright_green   (if (display-graphic-p) "#b8bb26" "color-142"))
          (gruvbox-bright_yellow  (if (display-graphic-p) "#fabd2f" "color-214"))
          (gruvbox-bright_blue    (if (display-graphic-p) "#83a598" "color-109"))
          (gruvbox-bright_purple  (if (display-graphic-p) "#d3869b" "color-175"))
          (gruvbox-bright_aqua    (if (display-graphic-p) "#8ec07c" "color-108"))
          (gruvbox-bright_orange  (if (display-graphic-p) "#fe8019" "color-208"))

          (gruvbox-neutral_red    (if (display-graphic-p) "#fb4934" "#d75f5f"))
          (gruvbox-neutral_green  (if (display-graphic-p) "#b8bb26" "#afaf00"))
          (gruvbox-neutral_yellow (if (display-graphic-p) "#fabd2f" "#ffaf00"))
          (gruvbox-neutral_blue   (if (display-graphic-p) "#83a598" "#87afaf"))
          (gruvbox-neutral_purple (if (display-graphic-p) "#d3869b" "#d787af"))
          (gruvbox-neutral_aqua   (if (display-graphic-p) "#8ec07c" "#87af87"))
          (gruvbox-neutral_orange (if (display-graphic-p) "#fe8019" "#ff8700"))

          (gruvbox-faded_red      (if (display-graphic-p) "#9d0006" "color-88"))
          (gruvbox-faded_green    (if (display-graphic-p) "#79740e" "color-100"))
          (gruvbox-faded_yellow   (if (display-graphic-p) "#b57614" "color-136"))
          (gruvbox-faded_blue     (if (display-graphic-p) "#076678" "color-24"))
          (gruvbox-faded_purple   (if (display-graphic-p) "#8f3f71" "color-96"))
          (gruvbox-faded_aqua     (if (display-graphic-p) "#427b58" "color-66"))
          (gruvbox-faded_orange   (if (display-graphic-p) "#af3a03" "color-130"))

          (gruvbox-delimiter-one    (if (display-graphic-p) "#458588" "color-30"))
          (gruvbox-delimiter-two    (if (display-graphic-p) "#b16286" "color-168"))
          (gruvbox-delimiter-three  (if (display-graphic-p) "#8ec07c" "color-108"))
          (gruvbox-delimiter-four   (if (display-graphic-p) "#d65d0e" "color-166"))
          (gruvbox-white            (if (display-graphic-p) "#FFFFFF" "white"))
          (gruvbox-black            (if (display-graphic-p) "#000000" "black"))
          (gruvbox-sienna           (if (display-graphic-p) "#DD6F48" "sienna"))
          (gruvbox-darkslategray4   (if (display-graphic-p) "#528B8B" "DarkSlateGray4"))
          (gruvbox-lightblue4       (if (display-graphic-p) "#66999D" "LightBlue4"))
          (gruvbox-burlywood4       (if (display-graphic-p) "#BBAA97" "burlywood4"))
          (gruvbox-aquamarine4      (if (display-graphic-p) "#83A598" "aquamarine4"))
          (gruvbox-turquoise4       (if (display-graphic-p) "#61ACBB" "turquoise4")))

      (custom-theme-set-faces
       'gruvbox
       `(mode-line-buffer-id   ((t (:foreground nil      :backgroUnd nil))))
       `(mode-line-inactive    ((t (:foreground ,gruvbox-light4 :background ,gruvbox-dark2 :inverse-video nil))))
       `(mode-line             ((t (:foreground ,gruvbox-dark0  :background ,gruvbox-dark4 :inverse-video nil))))
       `(sml/global            ((t (:foreground "gray50" :inverse-video nil))))
       `(sml/modes             ((t (:foreground "gruvbox-dark1"))))
       `(sml/filename          ((t (:foreground ,gruvbox-neutral_orange :weight bold)))))
       `(sml/prefix            ((t (:foreground "#bf6000"))))
       `(sml/read-only         ((t (:foreground "DeepSkyBlue"))))
       `(persp-selected-face   ((t (:foreground "ForestGreen" :inherit sml/filename))))
       `(helm-candidate-number ((t (:foreground nil :background nil :inherit sml/filename))))))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp :tangle yes
(set-frame-font (font-spec :family "Monaco" :size 12))
#+END_SRC

* Functions
** Buffer
#+BEGIN_SRC emacs-lisp :tangle yes
(defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))

(defun delete-current-buffer-file ()
  "Removes file connected to current buffer and kills buffer."
  (interactive)
  (let ((filename (buffer-file-name))
        (buffer (current-buffer))
        (name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
        (ido-kill-buffer)
      (when (yes-or-no-p "Are you sure you want to remove this file? ")
        (delete-file filename)
        (kill-buffer buffer)
        (message "File '%s' successfully removed" filename)))))

(defun call-other-window (fun position)
  (lambda (args)
    (select-window (if (eq position 'below) (split-window-below) (split-window-right)))
    (funcall fun args)))
#+END_SRC

** Eshell
#+BEGIN_SRC emacs-lisp :tangle yes
(defun eshell-maybe-bol ()
      (interactive)
      (let ((p (point)))
        (eshell-bol)
        (if (= p (point))
            (beginning-of-line))))

(defun eshell-here ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (height (/ (window-total-height) 3))
         (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))

(defun eshell/clear ()
  "Clear the eshell buffer."
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))

(defun eshell-projectile ()
  (interactive)
  (let* ((height (/ (window-total-height) 3))
         (name   (projectile-project-root)))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (cd (projectile-project-root)))
  (eshell/clear)
  (insert "ls")
  (eshell-send-input))

(defun eshell/x ()
  (kill-buffer-and-window))
#+END_SRC
** Window
#+BEGIN_SRC emacs-lisp :tangle yes
(defun go-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(defun emacs-buffer-p (name)
  "Returns true if the name matches an Emacs buffer."
  (string-match-p "\\*.*\\*" name))

(defun next-non-emacs-buffer (&optional original)
  "Similar to next-buffer, but ignores emacs buffer such as *scratch*, *messages* etc."
  (interactive)
  (let ((tmp-orig (or original (buffer-name))))
    (next-buffer)
    (if (and
         (not (eq (buffer-name) tmp-orig))
         (emacs-buffer-p (buffer-name)))
        (next-non-emacs-buffer tmp-orig))))

(defun previous-non-emacs-buffer (&optional original)
  "Similar to previous-buffer, but ignores emacs buffer such as *scratch*, *messages* etc."
  (interactive)
  (let ((tmp-orig (or original (buffer-name))))
    (previous-buffer)
    (if (and
         (not (eq (buffer-name) tmp-orig))
         (emacs-buffer-p (buffer-name)))
        (previous-non-emacs-buffer tmp-orig))))
#+END_SRC

** Ghq
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun find-ghq-root ()
    (car (split-string (shell-command-to-string "ghq root"))))

  (defun find-ghq-projects()
    (split-string (shell-command-to-string "ghq list --full-path")))
#+END_SRC
  
* Package settings
** Evil
*** Evil mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package evil
    :config
    (evil-mode t)

    (defvar evil-mode-list
      '((eshell-mode         insert)
        (comint-mode         insert)
        (alchemist-iex-mode  insert)
        (magit-mode          emacs)
        (magit-status        emacs)
        (magit-log-mode      emacs)
        (magit-commit-mode   emacs)
        (magit-diff-mode     emacs)
        (magit-popup-mode    emacs)
        (magit-merge-popup   emacs)
        (magit-revision-mode emacs)
        (direx:direx-mode    emacs)
        (git-commit-mode     insert)))

    (dolist (mode evil-mode-list)
      (evil-set-initial-state (nth 0 mode) (nth 1 mode)))

    (define-key evil-insert-state-map "\C-a" 'beginning-of-line)
    (define-key evil-insert-state-map "\C-e" 'end-of-line)
    (define-key evil-insert-state-map "\C-f" 'forward-char)
    (define-key evil-insert-state-map "\C-b" 'backward-char)
    (define-key evil-insert-state-map "\C-d" 'delete-char)
    (define-key evil-insert-state-map "\C-n" 'next-line)
    (define-key evil-insert-state-map "\C-p" 'previous-line)
    (define-key evil-insert-state-map "\C-w" 'evil-delete)
    (define-key evil-insert-state-map "\C-k" 'kill-line)

    (define-key evil-motion-state-map (kbd "<right>") nil)
    (define-key evil-motion-state-map (kbd "<left>")  nil)
    (define-key evil-motion-state-map (kbd "<down>")  nil)
    (define-key evil-motion-state-map (kbd "<up>")    nil))
#+END_SRC

*** Evil leader
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package evil-leader
  :require evil
  :config
  (global-evil-leader-mode)
  (setq evil-leader/in-all-states t)

  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key
    "yy"    'helm-show-kill-ring
    "cc"    'evilnc-comment-or-uncomment-lines
    "cp"    'evilnc-copy-and-comment-lines
    "cb"    'evilnc-comment-or-uncomment-paragraphs
    "co"    'evilnc-comment-operator
    "sh"    'evil-search-highlight-persist-remove-all
    "TAB"   'transpose-frame))
#+END_SRC

*** Evil surround
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package evil-surround
    :require evil
    :config
    (global-evil-surround-mode t)
    (define-key evil-visual-state-map "s" 'evil-surround-region))
#+END_SRC

*** Evil search highlight persist
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package evil-search-highlight-persist
  :require evil
  :config
  (global-evil-search-highlight-persist t)
  (custom-set-faces '(evil-search-highlight-persist-highlight-face ((t (:foreground "white" :background "#718c00"))))))
#+END_SRC

** Projectile
projectile-project-root-files (append '("init.el") projectile-project-root-files))
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package projectile
    :config
    (setq projectile-enable-caching t
          projectile-switch-project-action 'projectile-dired
          projectile-ignored-project-function #'(lambda (project-root) 'true)
          projectile-known-projects (find-ghq-projects)
          projectile-completion-system 'helm
          projectile-globally-ignored-directories (append '(".cask") projectile-globally-ignored-files)
          projectile-project-root-files ())
    (projectile-global-mode))
#+END_SRC

** Helm
*** Helm config
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package helm-config)
#+END_SRC

*** Helm
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package helm
  :require helm-config
  :config
  (setq helm-ff-skip-boring-files t
        helm-boring-file-regexp-list   '("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$" "\\._darcs$" "\\.la$" "\\.o$" "~$" "\\.so$" "\\.a$"
                                         "\\.elc$" "\\.fas$" "\\.fasl$" "\\.pyc$" "\\.pyo$" "bower_components" "node_modules")
        helm-boring-buffer-regexp-list '("\\` " "\\*helm" "\\*helm-mode" "\\*Echo Area" "\\*tramp" "\\*Minibuf" "\\*epc"))

  (advice-add 'helm-ff-filter-candidate-one-by-one
              :around (lambda (fcn file)
                        (unless (string-match "\\(?:/\\|\\`\\)\\.\\{1,2\\}\\'" file)
                          (funcall fcn file))))

  (helm-autoresize-mode t)
  (helm-mode t)

  (define-key global-map (kbd "C-x C-f")    'helm-find-files)
  (define-key global-map (kbd "C-SPC")      'helm-mini)
  (define-key helm-map   (kbd "<tab>")      'helm-execute-persistent-action)
  (define-key helm-map   (kbd "C-i")        'helm-execute-persistent-action)
  (define-key helm-map   (kbd "C-z")        'helm-select-action)
  (define-key helm-map   (kbd "C-k")        'helm-previous-source)
  (define-key helm-map   (kbd "C-j")        'helm-next-source)

  (define-key helm-buffer-map     (kbd "<C-backspace>")
    #'(lambda () (interactive) (with-helm-alive-p (helm-exit-and-execute-action (lambda (buffer) (kill-buffer buffer) (helm-mini))))))

  (define-key helm-buffer-map     (kbd "<C-return>")
    #'(lambda () (interactive) (with-helm-alive-p (helm-exit-and-execute-action (call-other-window 'switch-to-buffer 'right)))))

  (define-key helm-buffer-map     (kbd "<C-S-return>")
    #'(lambda () (interactive) (with-helm-alive-p (helm-exit-and-execute-action (call-other-window 'switch-to-buffer 'below)))))

  (define-key helm-find-files-map (kbd "<C-return>")
    #'(lambda () (interactive) (with-helm-alive-p (helm-exit-and-execute-action (call-other-window 'find-file 'right)))))

  (define-key helm-find-files-map (kbd "<C-S-return>")
    #'(lambda () (interactive) (with-helm-alive-p (helm-exit-and-execute-action (call-other-window 'find-file 'below))))))
#+END_SRC

*** Helm projectile
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package helm-projectile
    :require projectile helm grep
    :config
    (helm-projectile-on)
    (setq projectile-switch-project-action 'projectile-dired) ;; Override helm-projectile-on setting
    (define-key projectile-command-map (kbd "s s") 'helm-projectile-ag)
    (define-key helm-projectile-find-file-map (kbd "<C-return>")
      #'(lambda () (interactive) (with-helm-alive-p (helm-exit-and-execute-action (call-other-window 'find-file 'right)))))
    (define-key helm-projectile-find-file-map (kbd "<C-S-return>")
      #'(lambda () (interactive) (with-helm-alive-p (helm-exit-and-execute-action (call-other-window 'find-file 'below))))))
#+END_SRC

** Perspective
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package perspective
    :config
    (persp-mode-set-prefix-key (kbd "C-j"))
    (define-key persp-mode-map (kbd "C-j C-n") 'persp-next)
    (define-key persp-mode-map (kbd "C-j C-p") 'persp-prev)
    (define-key persp-mode-map (kbd "C-j C-j") 'other-window)
    (define-key persp-mode-map (kbd "C-j h") 'windmove-left)
    (define-key persp-mode-map (kbd "C-j j") 'windmove-down)
    (define-key persp-mode-map (kbd "C-j k") 'windmove-up)
    (define-key persp-mode-map (kbd "C-j l") 'windmove-right)
    (persp-mode t))
#+END_SRC
** Winner
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package winner
:config
(winner-mode t)
(define-key global-map (kbd "M-D") 'winner-redo)
(define-key global-map (kbd "M-d")  'winner-undo))
#+END_SRC

** Ghq
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package ghq)
#+END_SRC

** Comint
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package comint
  :defer t
  :require evil
  :config
  (add-hook 'comint-mode-hook
            #'(lambda ()
                (evil-define-key 'insert comint-mode-map
                  (kbd "C-r") 'helm-comint-input-ring
                  (kbd "C-p") 'comint-previous-input
                  (kbd "C-n") 'comint-next-input))))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package company
  :defer t
  :require helm-company
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (add-hook 'global-company-mode-hook
            #'(lambda ()
                (setq company-idle-delay 0
                      company-dabbrev-downcase nil)
                (define-key company-active-map (kbd "M-n") nil)
                (define-key company-active-map (kbd "M-p") nil)
                (define-key company-active-map (kbd "\C-n") 'company-select-next)
                (define-key company-active-map (kbd "\C-p") 'company-select-previous))))
#+END_SRC
    
** Eshell
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package eshell
    :defer t
    :require evil
    :config
    (setq eshell-history-size 1000
          eshell-aliases-file (concat user-emacs-directory "eshell-aliases")
          eshell-prompt-function #'(lambda nil (concat (getenv "USER") "@" (system-name) ":"
                                                       (abbreviate-file-name (eshell/pwd))
                                                       (if (= (user-uid) 0) " # " " $ "))))

    (add-hook 'eshell-mode-hook #'(lambda ()
                                    (evil-define-key 'insert eshell-mode-map
                                      (kbd "C-a") 'eshell-maybe-bol
                                      (kbd "C-r") 'helm-eshell-history
                                      (kbd "C-p") 'eshell-previous-matching-input-from-input
                                      (kbd "C-n") 'eshell-next-matching-input-from-input)

                                    (company-mode -1)

                                    (defalias 'ff 'find-file)
                                    (defalias 'd  'dired))))
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package flycheck
  :defer t
  :init
  (add-hook 'after-init-hook 'global-flycheck-mode))
#+END_SRC

** Elixir
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package elixir-mode
  :defer t
  :require smartparens
  :config
  (setq blink-matching-delay 0.1)

  (add-hook 'elixir-mode-hook 'alchemist-mode)

  (defun my-elixir-do-end-close-action (id action context)
    (when (eq action 'insert)
      (newline-and-indent)
      (forward-line -1)
      (indent-according-to-mode)))

  (sp-with-modes '(elixir-mode)
    (sp-local-pair "->" "end"
                   :when '(("RET"))
                   :post-handlers '(:add my-elixir-do-end-close-action)
                   :actions '(insert)))

  (sp-with-modes '(elixir-mode)
    (sp-local-pair "do" "end"
                   :when '(("SPC" "RET"))
                   :post-handlers '(:add my-elixir-do-end-close-action)
                   :actions '(insert))))
#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package smartparens-config
  :config
  (smartparens-global-mode))
#+END_SRC

** Latex
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package tex-mode
  :defer t
  :init
  (add-to-list 'auto-mode-alist '("\\.tex$\\'" . latex-mode))
  :config
  (add-hook 'latex-mode-hook
            #'(lambda ()
                (flyspell-mode t)
                (ispell-change-dictionary "english")
                (local-unset-key (kbd "C-SPC")))))
#+END_SRC

** Elm
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package elm-mode
  :defer t
  :require flycheck
  :init
  (add-to-list 'auto-mode-alist '("\\.elm\\'" . elm-mode))
  :config
  (flycheck-define-checker elm
    "An Elm syntax checker
Uses Elm compiler. See URL
`http://elm-lang.org'."
    :command ("elm"
              "-m"
              "-o"        ; only javascript
              source)
    :error-patterns
    ((error line-start "Parse error at (line " line ", column " column "):\n"
            (message) line-end)
     (error line-start "Error on line " line ", column " column " to " (one-or-more digit) ":\n"
            (message) line-end)
     (error line-start "Type error on line " line ", column " column " to " (one-or-more digit)":\n"
            (message (one-or-more (or not-newline "\n")))
            line-end)
     (error line-start "Type Error: "
            (message (one-or-more (or not-newline "\n")))
            line-end)
     (error line-start "Syntax Error: "
            (message (one-or-more (or not-newline "\n")))))
    :modes (elm-mode))

  (add-to-list 'flycheck-checkers 'elm))
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package lua-mode
  :defer t
  :require flycheck
  :init
  (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
  (add-to-list 'interpreter-mode-alist '("lua" . lua-mode)))
#+END_SRC

** Guide-key
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package guide-key
  :config
  (setq guide-key/guide-key-sequence '("<SPC>" "C-c")
        guide-key/recursive-key-sequence-flag t
        guide-key/idle-delay 0.1
        guide-key/popup-window-position 'bottom)
  (guide-key-mode t))
#+END_SRC

** Javascript
*** Tern
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package tern
    :defer t
    :require company
    :init
    (add-to-list 'company-backends 'company-tern)
    (add-hook 'tern-mode-hook
              #'(lambda ()
                  (evil-leader/set-key
                    "md" 'tern-find-definition
                    "mr" 'tern-rename-variable
                    "mh" 'tern-get-docs
                    "mt" 'tern-get-type))))
#+END_SRC

*** Js2
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package js2-mode
    :require company flycheck tern
    :mode "\\.js\\'"
    :config
    (setq-default js2-basic-offset 2)
    (add-hook 'js2-mode-hook (lambda ()
                               (evil-leader/set-key
                                 "moe" 'js2-mode-toggle-element
                                 "mow" 'js2-mode-toggle-warnings-and-errors
                                 "moc" 'js2-mode-toggle-hide-comments
                                 "mof" 'js2-mode-toggle-hide-functions
                                 "mof" 'js2-mode-toggle-hide-functions
                                 "moa" 'js2-mode-show-all)
                               (tern-mode t))))
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package rust-mode
    :require flycheck-rust
    :mode "\\.rs\\'"
    :config
    (setq-default rust-basic-offset 4)
    (add-hook 'flycheck-mode-hook 'flycheck-rust-setup))
#+END_SRC

** Golang
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package go-mode
    :mode "\\.go\\'"
    :init
    (progn
      (defun rcoedo/go-mode-fmt-before-save ()
        (when (eq major-mode 'go-mode)
          (gofmt-before-save)))

      (defun rcoedo/go-mode-bindings ()
        (evil-leader/set-key
          "ma" 'go-import-add
          "md" 'godef-describe
          "mj" 'godef-jump
          "mJ" 'godef-jump-other-window))

      (add-to-list 'company-backends 'company-go)
      (add-hook 'before-save-hook 'rcoedo/go-mode-fmt-before-save)
      (add-hook 'go-mode-hook 'rcoedo/go-mode-bindings))
    :config
    (progn
      (load-file "$GOPATH/src/golang.org/x/tools/cmd/oracle/oracle.el")
      (setq gofmt-command "goimports")))
#+END_SRC

** Clojure
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package cider
    :defer t
    :init
    (add-hook 'cider-mode-hook #'eldoc-mode))

  (req-package clojure-mode
    :mode "\\.clj\\'")
#+END_SRC

** Web
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package web-mode
    :defer t
    :require flycheck
    :init
    (add-to-list 'auto-mode-alist '("\\.phtml\\'"     . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'"   . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'"   . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'"       . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'"  . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'"    . web-mode))
    (add-to-list 'auto-mode-alist '("\\.ejs\\'"       . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx\\'"       . web-mode))
    :config
    (setq-default flycheck-disabled-checkers
                   (append flycheck-disabled-checkers '(javascript-jshint)))

    (add-hook 'web-mode-hook
              #'(lambda ()
                  (setq web-mode-markup-indent-offset 2)
                  (setq web-mode-css-indent-offset 2)
                  (setq web-mode-code-indent-offset 2)
                  (tern-mode t)))

    (flycheck-add-mode 'javascript-eslint 'web-mode))
#+END_SRC

** Transpose-frame
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package transpose-frame)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package magit
    :bind (("C-c g s"   . magit-status)
           ("C-c g l l" . magit-log)
           ("C-c g l c" . magit-log-current)))
#+END_SRC

** Popwin
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package popwin
    :config
    (popwin-mode 1))
#+END_SRC

** Direx
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package direx
    :require popwin projectile
    :config
    (push '(direx:direx-mode :position left :width 40 :dedicated t :stick t)
          popwin:special-display-config)
    (add-hook 'direx:direx-mode-hook #'(lambda ()
                                         (setq mode-line-format nil)
                                         (linum-mode -1)))
    (global-set-key (kbd "C-x t") #'(lambda ()
                                      (interactive)
                                      (direx:find-directory-other-window (projectile-project-root)))))
#+END_SRC

** Org mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package org
    :config
    (add-hook 'org-mode-hook #'(lambda ()
                                 (define-key org-mode-map (kbd "S-right") nil)
                                 (define-key org-mode-map (kbd "S-left")  nil))))
#+END_SRC
   
* Globals
#+BEGIN_SRC emacs-lisp :tangle yes
  (put 'dired-find-alternate-file 'disabled nil)
  (put 'erase-buffer 'disabled nil)                 ; Allow the use of erase-buffer
  (windmove-default-keybindings)                    ; Move between windows with shift + arrow keys
  (transient-mark-mode t)                           ; Show the mark as selected
  (global-auto-revert-mode t)                       ; Reload buffers when they change outside emacs

  (setq-default c-basic-offset 4
                truncate-lines nil
                prefer-coding-system 'utf-8
                indent-tabs-mode nil
                global-auto-revert-non-file-buffers t ;; Auto-revert
                auto-revert-verbose nil
                tab-width 4
                backup-inhibited t
                auto-save-default nil)

  (define-key key-translation-map (kbd "C-,") (kbd "C-x")) ;; These bring sanity to my fingers
  (define-key key-translation-map (kbd "C-.") (kbd "C-c"))
  (define-key key-translation-map "\e"        (kbd "C-g"))


  (define-key global-map (kbd "M-n")           'next-non-emacs-buffer)
  (define-key global-map (kbd "M-p")           'previous-non-emacs-buffer)
  (define-key global-map (kbd "M-f")           'delete-other-windows)
  (define-key global-map (kbd "M-e")           'eshell-projectile)
  (define-key global-map (kbd "M-t")           'transpose-frame)
  (define-key global-map (kbd "C-;")           'other-window)
  (define-key global-map (kbd "C-'")           (lambda () (interactive)(other-window -1)))
  (define-key global-map (kbd "C-x C-r")       'rename-current-buffer-file)
  (define-key global-map (kbd "C-x C-k")       'delete-current-buffer-file)

  (define-key global-map (kbd "\C-x2") (lambda () (interactive)(split-window-vertically) (other-window 1)))
  (define-key global-map (kbd "\C-x3") (lambda () (interactive)(split-window-horizontally) (other-window 1)))
#+END_SRC

* It's about time
#+BEGIN_SRC emacs-lisp :tangle yes
(req-package-finish)
#+END_SRC
